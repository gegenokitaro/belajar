/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gasa;

import java.io.File;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jxl.Sheet;
import jxl.Workbook;
import org.fusesource.jansi.AnsiConsole;
import static org.fusesource.jansi.Ansi.*;
import static org.fusesource.jansi.Ansi.Color.*;

/**
 *
 * @author TOSHIBA
 */
public class Gui_GASA extends javax.swing.JFrame {
     private DefaultTableModel model1;
     private DefaultTableModel model2;
     private DefaultTableModel model3;
     private DefaultTableModel model4;
     static float dimensi_mesin[][],jarak_mesin[][],matrix_frek[][],matrix_biaya[][];
     boolean a1=true;
    private String al;
    static int itungrow = 0;
    static float rdk;
    static float laksyen;
    float arrlaks[];
    
    DecimalFormat df = new DecimalFormat("#.#");
    /**
     * Creates new form Gui_GASA
     */
    public Gui_GASA() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nmesin = new javax.swing.JTextField();
        jarak_baris = new javax.swing.JTextField();
        lebar_ruang = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        pop_size = new javax.swing.JTextField();
        max_gen = new javax.swing.JTextField();
        Pc = new javax.swing.JTextField();
        Pm = new javax.swing.JTextField();
        r = new javax.swing.JTextField();
        T0 = new javax.swing.JTextField();
        Ta = new javax.swing.JTextField();
        alpha = new javax.swing.JTextField();
        search_data = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabel_mesin = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabel_jarak = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabel_frek = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabel_biaya = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        p = new javax.swing.JTextField();
        error = new javax.swing.JLabel();
        kerjakan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("GASA UNTUK PENENTUAN TATA LETAK MESIN MULTY-ROW");

        jLabel2.setText("Input Data            :");

        jLabel3.setText("Jumlah Mesin        :");

        jLabel4.setText("Jarak_Baris           :");

        jLabel5.setText("Lebar Ruang         :");

        nmesin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nmesinActionPerformed(evt);
            }
        });

        jarak_baris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jarak_barisActionPerformed(evt);
            }
        });

        jLabel6.setText("Input Parameter   :");

        jLabel7.setText("Pop Size                :");

        jLabel8.setText("Max. Generasi      :");

        jLabel9.setText("Pc                         :");

        jLabel10.setText("Pm                        :");

        jLabel11.setText("r                           :");

        jLabel12.setText("T0                        :");

        jLabel13.setText("Ta                        :");

        jLabel14.setText("Alpha                   :");

        r.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rActionPerformed(evt);
            }
        });

        search_data.setText("Search Data");
        search_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_dataActionPerformed(evt);
            }
        });

        tabel_mesin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabel_mesin);

        jTabbedPane5.addTab("Dimensi Mesin", jScrollPane2);

        tabel_jarak.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tabel_jarak);

        jTabbedPane5.addTab("Jarak Antar Mesin", jScrollPane3);

        tabel_frek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tabel_frek);

        jTabbedPane5.addTab("Matrix Frekuensi", jScrollPane4);

        tabel_biaya.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tabel_biaya);

        jTabbedPane5.addTab("Matrix Biaya", jScrollPane6);

        jScrollPane1.setViewportView(jTabbedPane5);

        jTabbedPane2.addTab("Proses", jTextField1);
        jTabbedPane2.addTab("Hasil", jTextField2);

        jScrollPane5.setViewportView(jTabbedPane2);

        jLabel20.setText("P                          :");

        kerjakan.setText("Kerjakan");
        kerjakan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kerjakanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jarak_baris))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(nmesin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(lebar_ruang)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(Pc))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel10)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(Pm))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel11)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(r))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(max_gen))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(pop_size, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Ta, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                                            .addComponent(alpha)
                                            .addComponent(T0)
                                            .addComponent(p))))))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(kerjakan)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(search_data)
                                    .addGap(26, 26, 26)
                                    .addComponent(error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addComponent(jLabel1)
                .addGap(0, 203, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(search_data)
                    .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(nmesin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jarak_baris, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(lebar_ruang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(pop_size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(max_gen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(Pc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(Pm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(r, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(p, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(T0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Ta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(12, 12, 12)
                        .addComponent(jLabel14))
                    .addComponent(alpha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kerjakan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nmesinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nmesinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nmesinActionPerformed

    private void jarak_barisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jarak_barisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jarak_barisActionPerformed

    private void rActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rActionPerformed

    private void search_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_dataActionPerformed
     JFileChooser jfc = new JFileChooser();
        jfc.showOpenDialog(null);
        File file = jfc.getSelectedFile();
        if(file==null){
            error.setText("Data Belum Masuk ");
            search_data.setEnabled(true);
            muatData("");}
        else{
            String dir = file.getAbsolutePath();
            error.setText(dir);
            dir.replace('\\','/');
            al=dir;
            muatData(dir);
            search_data.setEnabled(true);
        }
    }//GEN-LAST:event_search_dataActionPerformed

     @SuppressWarnings("empty-statement")
    private void kerjakanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kerjakanActionPerformed
try {
    float b = Float.valueOf(lebar_ruang.getText());
    laksyen = (2*b) - rdk;
    System.out.println("L': "+laksyen);
//    float[] kk = new float[itungrow];
//    float mm = laksyen;
//    for (int i = 0; i < itungrow; i++) {
//        kk[i] = (float) Math.random() * mm + 0;
//        mm -= kk[i];
//        System.out.print(" "+kk[i]+" ");
//    }
    System.out.println("");
    int pop = Integer.valueOf(pop_size.getText());
    float[] kecarray = new float[pop];
    int[][] kromorigin = new int[itungrow+1][pop]; //itungrow itu adalah mesin mesinnya, kalo pop itu index kromosomnya.
    float[][] neatcl = new float[itungrow][pop]; //neatclearance, indeksnya ngikutin kromorigin bagian mesin
    float[][] xaxis = new float[itungrow][pop];
    for (int i = 0; i < pop; i++) {
        int btssprtr = itungrow-2;
        int sprtr = (int) (Math.random() * btssprtr + 2);
        kromorigin[0][i] = sprtr;
        double atas = (double) itungrow;
        double bawah = (double) sprtr;
        double hasil = atas / bawah;
        int pbltn = (int) Math.ceil(hasil);
        int[] testarray = new int[itungrow];
        for(int pa = 0; pa < testarray.length;pa++){
            testarray[pa] = pa + 1;
            System.out.print(testarray[pa]+" | ");
        }
        System.out.println("kromosom "+(i+1)+" separator "+sprtr);
        shuffleArray(testarray);
        int kakkak = 0;
        float btsneatcl = laksyen; //batasan buat nentukan nilai neatclearance
        int btssprtrntcl = 0; //batasan separator buat ngitung neatclearance
        for (int j = 0; j < testarray.length; j++) {
            kromorigin[j+1][i] = testarray[j];
            neatcl[j][i] = (float) Math.random() * btsneatcl + 0;
            if (btssprtrntcl < kromorigin[0][i]) { 
                btsneatcl -= neatcl[j][i];
            } else {
                btsneatcl = laksyen;
                btssprtrntcl = 0;
            }
            btssprtrntcl++;
        }
        int[][] krom1 = new int[pbltn][sprtr];
        float[][] krom2 = new float[pbltn][sprtr];
        for (int j = 0; j < pbltn; j++) {
            float btsrndm = laksyen;
            for (int k = 0; k < sprtr; k++) {
                if(kakkak < testarray.length){
                    krom1[j][k] = testarray[kakkak];
                    System.out.print(" "+String.valueOf(krom1[j][k])+" ");
                    kakkak++;
                } else {
                    break;
                }
                krom2[j][k] = (float) Math.random() * btsrndm + 0;
                btsrndm -= krom2[j][k];
            }
            System.out.print(" | ");
            for (int k = 0; k < sprtr; k++) {
                System.out.print(" "+krom2[j][k]+" ");
            }
            System.out.println("");
            
            
         }
         float[][] maxis = new float[itungrow][2];
         int mb = 0;
         int incnrtr = 0;
         int icm = 0;
         for (int k = 0; k < itungrow; k++) {
              float dk0 = jarak_mesin[0][0];
              int valarray = testarray[k];
              System.out.print(" mesin "+valarray+" >>  ");
              float lk = dimensi_mesin[valarray-1][0];
              float delta = krom2[mb][incnrtr];
              if(icm < incnrtr + 1){
                  maxis[k][0] = dk0 + delta + ((1/2) * (lk));
                  
              } else {
                  float dki = jarak_mesin[testarray[k]-1][testarray[k-1]];
                  int valarraz = testarray[k-1];
                  float li = dimensi_mesin[valarraz-1][0];
                  float ldelta = (lk + li);
                  //float ldelta = lk + (dimensi_mesin[testarray[k-1]][0]); 
                  maxis[k][0] = maxis[k-1][0] + dki + delta + ((1/2)*ldelta);
              }
              icm += 3;              
              System.out.print(" "+df.format(maxis[k][0])+" ");
              xaxis[k][i] = maxis[k][0];
              maxis[k][1] = (pbltn - (mb + 1)) * Float.valueOf(jarak_baris.getText());
              System.out.print(" | " + maxis[k][1]);
              incnrtr++;
              if(incnrtr == sprtr){
                 mb += 1;
                 incnrtr = 0;
                 icm = 0;
             }
             System.out.println("");
         }
         float[][] jarakmesinbaru = new float [itungrow][itungrow];
         for (int j = 0; j < itungrow; j++) {
            for (int l = 0; l < itungrow; l++) {
                jarakmesinbaru[j][l] = Math.abs((maxis[j][0] - maxis[l][0]) + (maxis[j][1] - maxis[l][1]));
                System.out.print(" "+df.format(jarakmesinbaru[j][l])+" ");
            }
            System.out.println("");
        }
        System.out.println("");
        float[][] fctujuan = new float [itungrow][itungrow];
        for (int j = 0; j < itungrow; j++) {
            for (int k = 0; k < itungrow; k++) {
                fctujuan[j][k] = jarakmesinbaru[j][k] * matrix_biaya[testarray[j]-1][testarray[k]-1] * matrix_frek[testarray[j]-1][testarray[k]-1];
                System.out.print(" "+fctujuan[j][k]+" ");
            }
            System.out.println("");
            
        }
        float sum = 0;
        System.out.println("");
        for (int j = 0; j < itungrow; j++) {
            for (int k = 0; k < j; k++) {
                System.out.print(" "+fctujuan[j][k]);
                sum += fctujuan[j][k];
            }
            
            System.out.println("");
        }
        System.out.println(sum);
        kecarray[i] = sum;
    }
    System.out.println("\n==============================================================");
    System.out.println("");
    float small = kecarray[0];
    int index = 0;
    for (int i = 0; i < kecarray.length; i++) {
        System.out.print(kecarray[i]+"   ");
        if (kecarray[i] < small) {
            small = kecarray[i];
            index = i;
        }
    }
    System.out.println("");
    
    float[] fortunecookies = kecarray;
    int numelts = fortunecookies.length - (index + 1); // fungsi tujuan yang sebenarnya adalah fortunecookies
    
    System.arraycopy(fortunecookies, index + 1, fortunecookies, index, numelts);
    
    System.out.println("");
    float[] fungsitujuan = new float[pop - 1];
    float[] seperngengek = new float[pop -1];
    float[] pk = new float[pop-1];
    float[] kumul = new float[pop-1];
    float totalseper = 0;
    System.out.println("fc tujuan \teval         \tpk          \tkumul        \trandom   \tindex");
    for (int i = 0; i < fungsitujuan.length; i++) {
        fungsitujuan[i] = fortunecookies[i];
        seperngengek[i] = 1/fungsitujuan[i];
        totalseper += seperngengek[i];
    }
    for (int i = 0; i < pk.length; i++) {
        pk[i] = seperngengek[i]/totalseper;
        if (i==0) {
            kumul[i] = pk[i];
        } else {
            kumul[i] = kumul[i-1] + pk[i];
        }
    }
    
    // bilangan random untuk mencari mama mama dimanakah kau berada
    
    float[] mama = new float[pop - 1];
    
    for (int i = 0; i < mama.length; i++) {
        mama[i] = (float) Math.random() * 1 + 0;        
    }
    
    // menentukan calon induk
    int[] cik = new int[pop - 1];
    
    for (int i = 0; i < cik.length; i++) {
        for (int j = 0; j < kumul.length; j++) {
            if (mama[i] > kumul[j]) {
                cik[i] += 1;
            } else { }
        }
    }
    
    //randoman satu lagi
    float[] indkrand = new float[pop - 1];
    
    for (int i = 0; i < indkrand.length; i++) {
        indkrand[i] = (float) Math.random() * 1 + 0;        
    }
    //pc
    float numPc = Float.valueOf(Pc.getText());
    float numPm = Float.valueOf(Pm.getText());
    
    //cek pc dulu
    String[] induk = new String[pop - 1];
    for (int i = 0; i < induk.length; i++) {
        if (indkrand[i] < numPc) {
            induk[i] = "1";
        } else {
            induk[i] = "0";
        }
    }
    
    for (int i = 0; i < fungsitujuan.length; i++) {
        System.out.println(fungsitujuan[i]+"\t"+(seperngengek[i])+"\t"+pk[i]+"\t"+kumul[i]+"     \t"+mama[i]+"\t"+cik[i]+"\t"+indkrand[i]+"\t"+induk[i]);        
    }
    //menentukan induk
    
    System.out.println("\ntotal : "+totalseper);
    
    System.out.println("\nindex "+(index+1));
    //System.out.println("");
    System.out.println("paling kecil = "+small+" pada kromosom "+index);
    
    //menentukan calon induk mutasi
    float[] randkumul = new float[pop - 1];
    float[] randmut = new float[pop - 1];
    int[] calindmut = new int[pop - 1];
    String[] indmut = new String[pop - 1];
    int[] indkrom = new int[pop - 1];
    int ikcounter=0;
    for (int i = 0; i < randkumul.length; i++) {
        if (i < index) {
            indkrom[i] = ikcounter;
        } else {
            indkrom[i] = ikcounter + 1;
        }
        ikcounter++;
        randkumul[i] = (float) Math.random() * 1 + 0;
        for (int j = 0; j < calindmut.length; j++) {
            if (kumul[j] > randkumul[i]) { } else {
                calindmut[i] += 1;
            }
        }
    }
    int numcount = 5;
    while (numcount > 0) {
        if (Arrays.asList(indmut).contains("ind")) {
            break;
        } else {
            for (int i = 0; i < indmut.length; i++) {
                randmut[i] = (float) Math.random() * 1 + 0;
                if (randmut[i] < numPm) {
                    indmut[i] = "ind";
                } else {
                    indmut[i] = "bkn";
                }
            }
        }
        System.out.println("rand lagi");
        numcount++;
    }
    
    for (int i = 0; i < kumul.length; i++) {
        System.out.println(kumul[i]+"\t"+randkumul[i]+"\t"+calindmut[i]+"\t"+randmut[i]+"\t"+indmut[i]+"\t"+indkrom[i]);
    }
    
    for (int i = 0; i < pop; i++) {
        for (int j = 0; j < itungrow+1; j++) {
            System.out.print(" "+kromorigin[j][i]+"    ");
        }
        for (int j = 0; j < itungrow; j++) {
            System.out.print(neatcl[j][i]+"\t");            
        }
        System.out.println("");
    }
    for (int i = 0; i < pop; i++) {
        for (int j = 0; j < itungrow; j++) {
            System.out.print(" "+xaxis[j][i]);
        }
        System.out.println("");
    }
    float[] vlastmachine = new float[pop];
    for (int i = 0; i < pop; i++) {
        for (int j = 0; j < itungrow; j++) {
            int idxdmsmsn = kromorigin[j+1][i];
            int separator = kromorigin[0][i];
            float protolamda = xaxis[j][i] + ((1/2)*dimensi_mesin[idxdmsmsn-1][0]) + jarak_mesin[idxdmsmsn-1][itungrow+1];
            if(((j+1) % separator) == 0){
                if ((protolamda > vlastmachine[i])) {
                    vlastmachine[i] = protolamda;
                }
            }
            if(j == itungrow-1){
                if((protolamda > vlastmachine[i])){
                    vlastmachine[i] = protolamda;
                }
            }
        }
        System.out.println(vlastmachine[i]);
    }
    
    // menentukan nilai lamda
    
    float[] lambda = new float[vlastmachine.length];
    
    for (int i = 0; i < vlastmachine.length; i++) {
        lambda[i] = vlastmachine[i]-laksyen;
    }
    
    // sudah
    
    // menentukan fitness yang benar
    float[] fitness = new float[pop];
    float pinput = Float.valueOf(p.getText());
    
    System.out.println("");
    
    for (int i = 0; i < kecarray.length; i++) {
        fitness[i] = 1/(kecarray[i]+lambda[i]+pinput);
        System.out.println(fitness[i]);
    }
    
    // sudah
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                         //
    //      /////  //////      //////     //////     //////     //////    ///      ///   ////////   //////     //
    //    //       //   //   ///   ///  ///        ///        ///   ///    ///    ///    ///        //   //    //
    //    //       /////     ///   ///   //////     //////    ///   ///     ///  ///     //////     /////      //
    //    //       //  //    ///   ///       ///        ///   ///   ///      //////      ///        //  //     //
    //     /////   //   //    //////    //////     //////      //////         ///        ////////   //   //    //
    //                                                                                                         //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    System.out.println("========================================");
    System.out.println("crossover");
    
    int[] indexlamabaru = new int[pop];
    int counterinduk = 0;
    for (int i = 0; i < pop-1; i++) {
        if ( index > i){
            if (induk[i] == "1") {
                counterinduk++;
                indexlamabaru[i] = 1;
            }
        } else {
            if (induk[i] == "1") {
                counterinduk++;
                indexlamabaru[i+1] = 1;
            }
        }
    }
    System.out.println("");
    System.out.println("jumlah induk = "+counterinduk);
    
    int genap = 0;
    if (counterinduk % 2 != 0) {
        genap = counterinduk - 1;
    } else {
        genap = counterinduk;
    }
    System.out.println("hasil genap = "+genap);
    System.out.println("");
    
    for (int i = 0; i < indexlamabaru.length; i++) {
        System.out.print(indexlamabaru[i]+"\t");
    }
    System.out.println("");
    
    for (int i = 0; i < pop; i++) {
        if (indexlamabaru[i] == 1) {
            System.out.print("kr"+i+"   ");
            for (int j = 0; j < indexlamabaru.length; j++) {                
                System.out.print("   "+kromorigin[j+1][i]+"   ");
            }
            System.out.println();
        }
    }
    
    int[] krossatu = new int[genap];
    int indukkromosom = 0;
    for (int i = 0; i < pop; i++) {
        if(indexlamabaru[i] == 1){
            krossatu[indukkromosom] = i;
            indukkromosom++;
        }
        if (indukkromosom == genap) {
            break;
        }
    }
    System.out.println("");
    for (int i = 0; i < krossatu.length; i++) {
        System.out.println(krossatu[i]);
    }
    
    int jmlpair = genap / 2;
    int[][] pairkros = new int[2][jmlpair];
    System.out.println("");
    int intepret = 0;
    for (int i = 0; i < jmlpair; i++) {
        for (int j = 0; j < 2; j++) {
            pairkros[j][i] = krossatu[intepret];
            intepret++;
            System.out.print(pairkros[j][i]+" ");
        }
        System.out.println("");
    }
    
    
    int[][] anakkros = new int[itungrow+1][jmlpair*2];
    int penandabaris = 0;
    int penandabarismesin = 0;
    for (int i = 0; i < jmlpair; i++) {
        // menentukan batasan randoman separator, yang berupa 2 angka random. disini ditentukan angka mana yg lebih besar dari yang lain sehingga bisa dijadikan batas atas atau bawah.
        int[] batas = new int[2];
        if (kromorigin[0][pairkros[0][i]] > kromorigin[0][pairkros[1][i]]) {
            batas[0] = kromorigin[0][pairkros[0][i]];
            batas[1] = kromorigin[0][pairkros[1][i]];
        } else {
            batas[0] = kromorigin[0][pairkros[1][i]];
            batas[1] = kromorigin[0][pairkros[0][i]];
        } // sampek sini
        int batasrand = (int) (Math.random()*((batas[0]-batas[1])+1)) + batas[1]; // proses ngerandomnya
        anakkros[0][i+penandabaris] = batasrand; // dimasukkan ke anak v.1
        System.out.println("batas "+batas[0]+" + "+batas[1]+" = "+anakkros[0][i+penandabaris]);
        penandabaris++;
        anakkros[0][i+penandabaris] = (int) (Math.random()*((batas[0]-batas[1])+1)) + batas[1]; // dimasukkan ke anak v.2
        
        int randindex1 = (int) (Math.random()*(itungrow-1)+1)+1;
        int randindex2 = (int) (Math.random()*(itungrow-1)+1)+1;
        
        int randbesar = 0;
        int randkecil = 0;
        
        if (randindex1 > randindex2) {
            randbesar = randindex1;
            randkecil = randindex2;
        } else {
            randbesar = randindex2;
            randkecil = randindex1;
        }
        
        int perbrand = randbesar - randkecil + 1;
        System.out.println(randbesar+" - "+randkecil+" = "+perbrand);
        String[] dataindukkedua = new String[itungrow];
        for (int j = 0; j < itungrow; j++) {
            dataindukkedua[j] = String.valueOf(kromorigin[j+1][pairkros[1][i]]);
        }
        for (int j = 0; j < perbrand; j++) {
            anakkros[j+randkecil][i+penandabarismesin] = kromorigin[j+randkecil][pairkros[0][i]];
            List<String> list = new ArrayList<String>(Arrays.asList(dataindukkedua));
            list.remove(String.valueOf(kromorigin[j+randkecil][pairkros[0][i]]));
            dataindukkedua = list.toArray(new String[0]);
        }
        System.out.print("data induk kedua "+dataindukkedua.length+" = ");
        for (int j = 0; j < dataindukkedua.length; j++) {
            System.out.print(dataindukkedua[j]+" ");
        }
        int dikcounter = 0;
        for (int j = 0; j < dataindukkedua.length; j++) {
            if(j < randkecil-1){
                anakkros[j+1][i+penandabarismesin] = Integer.valueOf(dataindukkedua[j]);
                dikcounter++;
            } else {
                anakkros[j+randbesar-dikcounter+1][i+penandabarismesin] = Integer.valueOf(dataindukkedua[j]);
            }
        }
        System.out.println("");
        
        penandabarismesin++;
        
        int randindex1v2 = (int) (Math.random()*(itungrow-1)+1)+1;
        int randindex2v2 = (int) (Math.random()*(itungrow-1)+1)+1;
        
        int randbesarv2 = 0;
        int randkecilv2 = 0;
        
        if (randindex1v2 > randindex2v2) {
            randbesarv2 = randindex1v2;
            randkecilv2 = randindex2v2;
        } else {
            randbesarv2 = randindex2v2;
            randkecilv2 = randindex1v2;
        }
        
        int perbrandv2 = randbesarv2 - randkecilv2 + 1;
        System.out.println(randbesarv2+" - "+randkecilv2+" = "+perbrandv2);
        String[] dataindukkeduav2 = new String[itungrow];
        for (int j = 0; j < itungrow; j++) {
            dataindukkeduav2[j] = String.valueOf(kromorigin[j+1][pairkros[1][i]]);
        }
        for (int j = 0; j < perbrandv2; j++) {
            anakkros[j+randkecilv2][i+penandabarismesin] = kromorigin[j+randkecilv2][pairkros[0][i]];
            List<String> list = new ArrayList<String>(Arrays.asList(dataindukkeduav2));
            list.remove(String.valueOf(kromorigin[j+randkecilv2][pairkros[0][i]]));
            dataindukkeduav2 = list.toArray(new String[0]);
        }
        System.out.print("data induk kedua v2 "+dataindukkeduav2.length+" = ");
        for (int j = 0; j < dataindukkeduav2.length; j++) {
            System.out.print(dataindukkeduav2[j]+" ");
        }
        int dikcounterv2 = 0;
        for (int j = 0; j < dataindukkeduav2.length; j++) {
            if(j < randkecilv2-1){
                anakkros[j+1][i+penandabarismesin] = Integer.valueOf(dataindukkeduav2[j]);
                dikcounterv2++;
            } else {
                anakkros[j+randbesarv2-dikcounterv2+1][i+penandabarismesin] = Integer.valueOf(dataindukkeduav2[j]);
            }
        }
        System.out.println("");
    }
    
    
    int neatcounter = 0;
    
    // neatclearance
    float[][] neatkros = new float[itungrow][jmlpair*2];
    for (int i = 0; i < jmlpair; i++) {
        float alphakros1 = (float) Math.random()*1;
        float alphakros2 = 1 - alphakros1;
        
        for (int j = 0; j < itungrow; j++) {
            neatkros[j][i+neatcounter] = (alphakros1*neatcl[j][pairkros[0][i]]) +(alphakros2*neatcl[1][i]);
        }
        neatcounter++;
        float alphakros1v2 = (float) Math.random()*1;
        float alphakros2v2 = 1 - alphakros1;
        
        for (int j = 0; j < itungrow; j++) {
            neatkros[j][i+neatcounter] = (alphakros1v2*neatcl[j][pairkros[0][i]]) +(alphakros2v2*neatcl[1][i]);
        }
    }
    
    for (int i = 0; i < (jmlpair*2); i++) {
        for (int j = 0; j < itungrow+1; j++) {
            System.out.print(anakkros[j][i]+" ");
        }
        for (int j = 0; j < itungrow; j++) {
            System.out.print("  "+String.format("%,4f",neatkros[j][i])+" ");
        }
        System.out.println("");
    }
    
    // menghitung fungsi tujuan crossover
    
    float[][] xaxiskros = new float[itungrow][jmlpair*2];
    float[][] yaxiskros = new float[itungrow][jmlpair*2];
    
    // menentukan xaxis crossover
    System.out.println("xaxis ");
    
    for (int i = 0; i < jmlpair*2; i++) {
        int counter = 0;
        for (int j = 0; j < itungrow; j++) {
            if ((j % anakkros[0][i]) == 0) {
                counter = 0;
            }
            if (counter == 0) {
                xaxiskros[j][i] = jarak_mesin[anakkros[j+1][i]-1][0] + neatkros[j][i] + ((dimensi_mesin[anakkros[j+1][i]-1][0])/2);
                counter += 3;
            } else {
                xaxiskros[j][i] = xaxiskros[j-1][i] + neatkros[j][i] + ((dimensi_mesin[anakkros[j+1][i]-1][0])/2);
            }
            System.out.println(xaxiskros[j][i]+"/"+counter+"  ");
        }
        System.out.println("");
    }
    
    // menentukan yaxis crossover
    
    System.out.println("yaxis");
    for (int i = 0; i < jmlpair*2; i++) {
        int counter = 0;
        for (int j = 0; j < itungrow; j++) {
            if ((j % anakkros[0][i]) == 0) {
                counter++;
            }
            yaxiskros[j][i] = Float.valueOf(jarak_baris.getText())*(counter-1);
            System.out.print(yaxiskros[j][i]+" ");
        }
        System.out.println("");
    }
    
    
    // menentukan fungsi tujuan
    
    float[][][] krosjarakmesin = new float[itungrow][itungrow][jmlpair*2];
    float[][][] krosmatrixfungsitujuan = new float[itungrow][itungrow][jmlpair*2];
    float[] krosfctujuan = new float[jmlpair*2];
    float[] krosfctujuanreal = new float[jmlpair*2];
    
    // menentukan jarak mesin
    
    for (int i = 0; i < jmlpair*2; i++) {
        for (int j = 0; j < itungrow; j++) {
            for (int k = 0; k < itungrow; k++) {
                krosjarakmesin[j][k][i] = Math.abs((xaxiskros[j][i] - xaxiskros[k][i]) + (yaxiskros[j][i] - yaxiskros[j][i]));
                System.out.print(String.format("%,3f", krosjarakmesin[j][k][i])+"\t");
            }
            System.out.println("");
        }
        System.out.println("");
        System.out.println("kromosom "+(i+1));
    }
    
    // menentukan matrix fungsi tujuan
    
    for (int i = 0; i < jmlpair*2; i++) {
        for (int j = 0; j < itungrow; j++) {
            for (int k = 0; k < itungrow; k++) {
                krosmatrixfungsitujuan[j][k][i] = matrix_biaya[kromorigin[j+1][i]-1][kromorigin[k+1][i]-1] * matrix_frek[kromorigin[j+1][i]-1][kromorigin[k+1][i]-1] * krosjarakmesin[j][k][i];
                System.out.print(String.format("%,5f", krosmatrixfungsitujuan[j][k][i])+"\t");
                krosfctujuan[i] += krosmatrixfungsitujuan[j][k][i];
            }
            System.out.println("");
        }
        System.out.println("");
    }
    
    // menentukan fungsi tujuan setiap kromosom
    
    for (int i = 0; i < jmlpair*2; i++) {
        krosfctujuanreal[i] = krosfctujuan[i]/2;
    }
    
    for (int i = 0; i < jmlpair*2; i++) {
        System.out.println("kromosom "+(i+1)+" fc tujuan = "+krosfctujuan[i]+"/"+krosfctujuanreal[i]);
    }
    
    // sudah
    
    // menentukan fitness
    
    float[] kroslamda = new float[jmlpair*2];
    float[] kroslamdatrue = new float[jmlpair*2];
    float[] krosfitnes = new float[jmlpair*2];
    
    // menentukan lamda dulu
    
    for (int i = 0; i < jmlpair*2; i++) {
        for (int j = 0; j < itungrow; j++) {
            float protolamda = xaxiskros[j][i] + (dimensi_mesin[anakkros[j+1][i]-1][0]/2) + jarak_mesin[anakkros[j+1][i]-1][itungrow+1];
            if (((j+1) % (anakkros[0][i])) == 0) {
                if (kroslamda[i] < protolamda) {
                    kroslamda[i] = protolamda;
                }
            }
            if ((j+1) == itungrow) {
                if (kroslamda[i] < protolamda) {
                    kroslamda[i] = protolamda;
                }
            }
        }
        kroslamdatrue[i] = kroslamda[i] - laksyen;
        System.out.println("kromosom "+(i+1)+" lamda nya "+kroslamda[i]+" - "+laksyen+" = "+kroslamdatrue[i]);
    }
    
    
    // baru sekarang menentukan fitness
    
    for (int i = 0; i < jmlpair*2; i++) {
        krosfitnes[i] = 1/(krosfctujuanreal[i]+kroslamdatrue[i]+pinput);
        System.out.println("kromosom "+(i+1)+" fitness nya "+krosfitnes[i]);
    }
    
    
    
    ////////////////////////////////////////////
    //                                        //
    //   ///    ///  /////////  ///    ///    //
    //    ///  ///   ///         ///  ///     //
    //     /////     //////       /////       //
    //      ///      ///           ///        //
    //     ///       /////////    ///         //
    //                                        //
    ////////////////////////////////////////////
    
    
    ////////////////////////////////////////
    //                                    //
    //     //////             ////        //
    //  ///                  //////       //
    //   /////              ///  ///      //
    //       ///           //////////     //
    //  //////       //   ///      ///    //
    //                                    //
    ////////////////////////////////////////
    
    // SIMULATED ANNEALING
    
    float suhuawal = Float.valueOf(T0.getText());
    float suhuakhir = Float.valueOf(Ta.getText());
    float alfa = Float.valueOf(alpha.getText());
    
    float suhupengulang = suhuawal;
    float kurangkuranginlah = alfa*suhuawal;
    
    float yekticounter = ((suhuawal - suhuakhir)/suhuawal)/alfa;
    int testcounter = (int) Math.round(yekticounter);
    
    System.out.println("yekti counter = "+yekticounter);
    System.out.println("yekti counter dibulatkan = "+testcounter);
    
    int indexkromosomsa = indkrom[Arrays.asList(indmut).indexOf("ind")];
    System.out.println("index = "+indexkromosomsa);
    System.out.println("");
    System.out.println("==================================");
    System.out.println("s.a.");
    
    int[] clnkromsa = new int[itungrow+1];
    float[] clnneatsa = new float[itungrow];
    
    for (int i = 0; i < clnkromsa.length; i++) {
        clnkromsa[i] = kromorigin[i][indexkromosomsa];
    }
    
    for (int i = 0; i < clnneatsa.length; i++) {
        clnneatsa[i] = neatcl[i][indexkromosomsa];
    }
    
    for (int i = 0; i < itungrow; i++) {
        System.out.print(String.format("%,5f", neatcl[i][indexkromosomsa])+"   ");
    }
    System.out.println("");
    
    
    
    int rinput = Integer.valueOf(r.getText());
    
    int[][] kromsa = new int[itungrow+1][rinput*2];
    float[][] neatsa = new float[itungrow][rinput*2];
    
    int[] hasilkromsa = new int[itungrow+1];
    float safitnessakhir = 0;
    
    // perulangan
    // darisini
    // karena tergantung masukan nya
    
    for (int x = 0; x < testcounter; x++) {
    
    // nentukan kromosom sa sama neatclearence sa
    for (int i = 0; i < rinput*2; i++) {
        for (int j = 0; j < clnkromsa.length; j++) {
            kromsa[j][i] = clnkromsa[j];
            System.out.print(kromsa[j][i]+" ");
        }
        for (int j = 0; j < clnneatsa.length; j++) {
            neatsa[j][i] = clnneatsa[j];
            System.out.print("  "+neatsa[j][i]+"  ");
        }
        System.out.println("");
    }
    
    int randindsa = (int) (Math.random()*itungrow)+1;
    
    for (int i = 0; i < rinput*2; i++) {
        neatsa[randindsa-1][i] = (clnneatsa[randindsa-1]/2)*(i+1);
    }
    
    System.out.println("");
    System.out.println("setelah di proses");
    System.out.println("");
    
    // mutation
        
    
    for (int i = 0; i < rinput*2; i++) {
        for (int j = 0; j < clnkromsa.length; j++) {
            System.out.print(kromsa[j][i]+" ");
        }
        for (int j = 0; j < clnneatsa.length; j++) {
            System.out.print("  "+String.format("%,5f", neatsa[j][i])+"  ");
        }
        System.out.println("");
    }
    
    float[][] xaxissa = new float[itungrow][rinput*2];
    float[][] yaxissa = new float[itungrow][rinput*2];
    
    // nentukan x axis
    for (int i = 0; i < rinput*2; i++) {
        int counter = 0;
        for (int j = 0; j < itungrow; j++) {
            if ((j % kromsa[0][0]) == 0) {
                counter = 0;
            }
            if(counter == 0){
                xaxissa[j][i] = jarak_mesin[kromsa[j+1][i]-1][0] + neatsa[j][i] + ((1/2)*(dimensi_mesin[kromsa[j+1][i]-1][0]));
                counter++;
            } else {
                xaxissa[j][i] = xaxissa[j-1][i] + neatsa[j][i] + ((1/2)*(dimensi_mesin[kromsa[j+1][i]-1][0])+dimensi_mesin[kromsa[j+1][i]-1][0]);
            }
        }
    }
    // sudah
    
    // nentukan y axis
    for (int i = 0; i < rinput*2; i++) {
        int counter = 0;
        for (int j = 0; j < itungrow; j++) {
            if ((j % kromsa[0][0]) == 0) {
                counter++;
            }
            yaxissa[j][i] = Integer.valueOf(jarak_baris.getText()) * (counter-1);
        }
    }
    // sudah
    
    System.out.println("");
    System.out.println("axis");
    System.out.println("");
    for (int i = 0; i < rinput*2; i++) {
        for (int j = 0; j < itungrow; j++) {
            System.out.print(String.format("%,3f", xaxissa[j][i])+"\t");
        }
        System.out.print(" | ");
        for (int j = 0; j < yaxissa.length; j++) {
            System.out.print(yaxissa[j][i]+"  ");
        }
        System.out.println("");
    }
    
    float[][][] sajarakmesin = new float[itungrow][itungrow][rinput*2];
    float[][][] samatrixfungsitujuan = new float[itungrow][itungrow][rinput*2];
    float[] safungstujuan = new float[rinput*2];
    float[] safungstujuanreal = new float[rinput*2];
    
    for (int i = 0; i < rinput*2; i++) {
        System.out.println("");
        System.out.println("kromosom = "+(i+1));
        
        //nentukan jarak antar mesin
        for (int j = 0; j < itungrow; j++) {
            for (int k = 0; k < itungrow; k++) {
                sajarakmesin[j][k][i] = Math.abs(xaxissa[j][i] - xaxissa[k][i]) + Math.abs(yaxissa[j][i] - yaxissa[k][i]);
                System.out.print(String.format("%,3f",sajarakmesin[j][k][i])+"\t");
            }
            System.out.println("");
        }
        
        // sudah sampek sini
        
        // nentukan matrix fungsi tujuan
        for (int j = 0; j < itungrow; j++) {
            for (int k = 0; k < itungrow; k++) {
                samatrixfungsitujuan[j][k][i] = matrix_biaya[kromsa[j+1][i]-1][kromsa[k+1][i]-1] * matrix_frek[kromsa[j+1][i]-1][kromsa[k+1][i]-1] * sajarakmesin[j][k][i];
                // nentukan fungsi tujuan
                safungstujuan[i] += samatrixfungsitujuan[j][k][i];
            }
        }
        // sudah sampek sini
    }
    
    // fungsi tujuan dibagi 2, ya itu fungsi tujuan yang sebenernya. soalnya yg atas cuman njumlah ga pake mbagi
    for (int i = 0; i < safungstujuanreal.length; i++) {
        safungstujuanreal[i] = safungstujuan[i]/2;
    }
    
    // sudah
    
    System.out.println("");
    System.out.println("matrix fungsi tujuan");
    System.out.println("");
    
    // ngeprint
    for (int i = 0; i < rinput*2; i++) {
        System.out.println("");
        System.out.println("kromosom "+(i+1)+" / fsum = "+safungstujuan[i]+" fsumreal = "+safungstujuanreal[i]);
        for (int j = 0; j < itungrow; j++) {
            for (int k = 0; k < itungrow; k++) {
                System.out.print(String.format("%,2f", samatrixfungsitujuan[j][k][i])+"\t");
            }
            System.out.println("");
        }
    }
    // sudah
    
    int[] indukkromsa = clnkromsa;
    float[] indukneatsa = clnneatsa;
    float fungsitujuaninduksa = kecarray[indexkromosomsa];
    
    float fcsapalingkecil = 0;
    
        
    System.out.println("");
    System.out.println("fungsi tujuan induk = "+fungsitujuaninduksa);
    
    // menentukan lamda sa
    
    System.out.println("");
    System.out.println("lamda sa");
    
    float[] protolamdasa = new float[rinput*2];
    float[] vlastmachinesa = new float[rinput*2];
    
    for (int i = 0; i < rinput*2; i++) {
        for (int j = 0; j < itungrow; j++) {
            float protolamda = xaxissa[j][i] + ((1/2)*dimensi_mesin[clnkromsa[j+1]-1][0] + jarak_mesin[clnkromsa[j+1]-1][itungrow+1]);
            if (((j+1) % clnkromsa[0]) == 0) {
                if(vlastmachinesa[i] < protolamda){
                    vlastmachinesa[i] = protolamda;
                }
            }
            if ((j+1) == itungrow) {
                if (vlastmachinesa[i] < protolamda) {
                    vlastmachinesa[i] = protolamda;
                }
            }
        }
        protolamdasa[i] = vlastmachinesa[i] - laksyen;
        System.out.println(protolamdasa[i]);
    }
    
    // menentukan fitness buat anak sa (biar dempal jadi binaragawan)
    
    System.out.println("");
    System.out.println("fitness sa");
    
    float[] safitness = new float[rinput*2];
    
    for (int i = 0; i < rinput*2; i++) {
        safitness[i] = 1/(safungstujuanreal[i]+protolamdasa[i]+pinput);
        System.out.println(safitness[i]);
    }
    
    float safitnesspalingbesar = 0;
    int saindexanakbesar = 0;
    
    for (int i = 0; i < safitness.length; i++) {
        if (safitness[i] > safitnesspalingbesar) {
            safitnesspalingbesar = safitness[i];
            saindexanakbesar = i;
        }
    }
    
    System.out.println("");
    System.out.println("fitness sa paling kecil = "+safitnesspalingbesar);
    
    float saindukfitnes = fitness[indexkromosomsa];
    float selisihsa = Math.abs(safitnesspalingbesar - saindukfitnes);
    
    
    System.out.println("");
    System.out.println("fitness induk = "+saindukfitnes);
    
        
        
        float randsa = (float) (Math.random()*1);
        
    float sap = 0;
    
    if (saindukfitnes > safitnesspalingbesar) {
        sap = (float) Math.exp(-selisihsa/(suhuawal-(suhuawal*x*alfa)));
        System.out.println("P = "+sap);
        if (sap >= randsa) {
            for (int i = 0; i < clnneatsa.length; i++) {
                clnneatsa[i] = neatcl[i][saindexanakbesar];
                safitnessakhir = fitness[saindexanakbesar];
            }
        } else {
            // do nothing
        }
    } else {
        for (int i = 0; i < clnneatsa.length; i++) {
            clnneatsa[i] = neatcl[i][saindexanakbesar];
        }
    }
    }
    
    System.out.println("");
    
    for (int i = 0; i < clnkromsa.length; i++) {
        System.out.print(clnkromsa[i] + "  ");
    }
    System.out.print(" | ");
    for (int i = 0; i < clnneatsa.length; i++) {
        System.out.print(clnneatsa[i]+"  ");
    }
    
    /////////////////////////////////////
    //                                 //
    //    /////      ////     /////    //
    //    //  //   //   //    //  //   //
    //    ////     //   //    ////     //
    //    //       //   //    //       //
    //    //        ////      //       //
    //                                 //
    /////////////////////////////////////
    
    int[][] popdarikromorigin = new int[itungrow+1][pop-1];
    float[][] neatdarikromorigin = new float[itungrow][pop -1];
    float[] fitnessdarikromorigin = new float[pop-1];
    int banyakkromosombaru = pop + (jmlpair*2);
    int[][] popbaru = new int[itungrow+1][banyakkromosombaru];
    float[][] neatbaru = new float[itungrow+1][banyakkromosombaru];
    float[] fitnessbaru = new float[banyakkromosombaru];
    float[] pekabaru = new float[banyakkromosombaru];
    float[] qikabaru = new float[banyakkromosombaru];
    
    for (int i = 0; i < pop-1; i++) {
        for (int j = 0; j < itungrow+1; j++) {
            popdarikromorigin[j][i] = kromorigin[j][indkrom[i]];
        }
        for (int j = 0; j < itungrow; j++) {
            neatdarikromorigin[j][i] = neatcl[j][indkrom[i]];
        }
        fitnessdarikromorigin[i] = fitness[indkrom[i]];
    }
    
    // masukkan kromosom mesin nya ke populasi baru
    
    for (int i = 0; i < itungrow+1; i++) {
        for (int j = 0; j < pop-1; j++) {
            popbaru[i][j] = popdarikromorigin[i][j];
        }
        for (int j = 0; j < jmlpair*2; j++) {
            popbaru[i][j+pop-1] = anakkros[i][j];
        }
        popbaru[i][banyakkromosombaru-1] = clnkromsa[i];
    }
    
    // masukkan neat clearance ke populasi baru
    
    for (int i = 0; i < itungrow; i++) {
        for (int j = 0; j < pop-1; j++) {
            neatbaru[i][j] = neatdarikromorigin[i][j];
        }
        for (int j = 0; j < jmlpair*2; j++) {
            neatbaru[i][j+pop-1] = neatkros[i][j];
        }
        neatbaru[i][banyakkromosombaru-1] = clnneatsa[i];
    }
    
    // masukkan fitness baru
    for (int i = 0; i < pop-1; i++) {
        fitnessbaru[i] = fitnessdarikromorigin[i];
    }
    for (int i = 0; i < jmlpair*2; i++) {
        fitnessbaru[i+pop-1] = krosfitnes[i];
    }
    fitnessbaru[banyakkromosombaru-1] = safitnessakhir;
    // ending dari fitness
    
    // nyari jumlah semua fitness
    
    float jumlahfitnessbaru = 0;
    
    for (int i = 0; i < banyakkromosombaru; i++) {
        jumlahfitnessbaru += fitnessbaru[i];
    }
    
    // nyari peka dan qika
    
    for (int i = 0; i < banyakkromosombaru; i++) {
        pekabaru[i] = fitnessbaru[i]/jumlahfitnessbaru;
        if (i == 0) {
            qikabaru[i] = pekabaru[i];
        } else {
            qikabaru[i] = qikabaru[i-1] + pekabaru[i];
        }
        
    }
    
    // sudah
    
    System.out.println("");
    
    for (int i = 0; i < banyakkromosombaru; i++) {
        for (int j = 0; j < itungrow+1; j++) {
            System.out.print(popbaru[j][i]+" ");
        }
        for (int j = 0; j < itungrow; j++) {
            System.out.print("  "+String.format("%,4f", neatbaru[j][i])+" ");
        }
        System.out.println();
    }
    
    System.out.println("");
    
    for (int i = 0; i < banyakkromosombaru; i++) {
        System.out.println("kr "+(i+1)+"\t"+String.format("%,2f", fitnessbaru[i])+"\t"+String.format("%,2f", pekabaru[i])+"\t"+String.format("%,2f", qikabaru[i]));
    }
    System.out.println("jml \t"+String.format("%,2f", jumlahfitnessbaru));
    
    System.out.println("");
    
    float[] bilcak = new float[pop-1];
    int[] chosenkromosom = new int[pop-1];
    
    for (int i = 0; i < bilcak.length; i++) {
        bilcak[i] = (float) ((Math.random()*0.9)+0.1);
        //System.out.println((i+1)+"\t"+bilcak[i]);
    }
    
    for (int i = 0; i < chosenkromosom.length; i++) {
        int counter = 0;
        for (int j = 0; j < qikabaru.length; j++) {
            if (qikabaru[qikabaru.length-j-1] < bilcak[i]) {
                counter++;
            }
            chosenkromosom[i] = counter;
        }
        System.out.println((i+1)+"\t"+bilcak[i]+"\t"+chosenkromosom[i]);
    }
    
    
    
//    for (int i = 0; i < indkrom.length; i++) {
//        for (int j = 0; j < itungrow+1; j++) {
//            System.out.print(popdarikromorigin[j][i] + " ");
//        }
//        System.out.println("");
//    }
//    
//    for (int i = 0; i < jmlpair*2; i++) {
//        for (int j = 0; j < itungrow+1; j++) {
//            System.out.print(anakkros[j][i]+" ");
//        }
//        System.out.println("");
//    }
//    
//    for (int i = 0; i < itungrow+1; i++) {
//        System.out.print(clnkromsa[i]+" ");
//    }
    
    //ngambil kromosom yg atas yg induk.
    //array yg kecil dijadikan batasan atas
    
//        float popsize = Float.parseFloat(pop_size.getText());
//        float pc =  Float.parseFloat(Pc.getText());
//        int jum_mesin = tabel_mesin.getRowCount();
//        float suhu_aw = Float.parseFloat(T0.getText());
//        float suhu_ak = Float.parseFloat(Ta.getText());
//        float alphaa = Float.parseFloat(alpha.getText());
//        float jum_iterasi = Float.parseFloat(max_gen.getText()); 
//        if (popsize <= 0 || pc <= 0 || jum_mesin <= 0 || suhu_aw <= 0 || suhu_ak <= 0 || alphaa <= 0 || jum_iterasi <= 0) {
//            JOptionPane.showMessageDialog(this, " Inputan tidak boleh negatif atau nol !!!");
//        }
//        else if (popsize > 0 && popsize < 2) {
//            JOptionPane.showMessageDialog(this, " Masukkan nilai pop_size minimal 2 !!!");
//        }
//        else if (pc >= 1) {              
//            JOptionPane.showMessageDialog(this, " Masukkan nilai pc antara 0 - 1 !!!");
//        }
//        else if (jum_iterasi < 1) {
//            JOptionPane.showMessageDialog(this, " Masukkan nilai max_iterasi minimal 1 !!!");
//        }
//        else if (suhu_aw <= suhu_ak) {
//            JOptionPane.showMessageDialog(this, " Suhu awal harus lebih besar dari suhu akhir !!!");
//        }
//        else if (alphaa >= 1){
//            JOptionPane.showMessageDialog(this, " Masukkan nilai alpha antara 0 - 1 !!!");
//        }   // TODO add your handling code here:indonesia.
    
    
    //System.out.println("Pc = " + numPc + "\n" + "Pm = " + numPm);
    
    
    }//GEN-LAST:event_kerjakanActionPerformed
catch(Exception e) {
        JOptionPane.showMessageDialog(this, " Data tidak valid !!!");}
    }
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui_GASA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui_GASA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui_GASA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui_GASA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui_GASA().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Pc;
    private javax.swing.JTextField Pm;
    private javax.swing.JTextField T0;
    private javax.swing.JTextField Ta;
    private javax.swing.JTextField alpha;
    private javax.swing.JLabel error;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jarak_baris;
    private javax.swing.JButton kerjakan;
    private javax.swing.JTextField lebar_ruang;
    private javax.swing.JTextField max_gen;
    private javax.swing.JTextField nmesin;
    private javax.swing.JTextField p;
    private javax.swing.JTextField pop_size;
    private javax.swing.JTextField r;
    private javax.swing.JButton search_data;
    private javax.swing.JTable tabel_biaya;
    private javax.swing.JTable tabel_frek;
    private javax.swing.JTable tabel_jarak;
    private javax.swing.JTable tabel_mesin;
    // End of variables declaration//GEN-END:variables

     @SuppressWarnings("empty-statement")
     public void muatData(String alamat) {
    File excelFile = new File(alamat); 
    if (excelFile.exists()) {
        try {
            Workbook workbook = Workbook.getWorkbook(excelFile);
            Sheet sheet1 = workbook.getSheet(0);
            Sheet sheet2 = workbook.getSheet(1);
            Sheet sheet3 = workbook.getSheet(2);
            Sheet sheet4 = workbook.getSheet(3);
            
            dimensi_mesin= new float[sheet1.getRows()][sheet1.getColumns()];
            TableModel model1 = new DefaultTableModel(sheet1.getRows(), sheet1.getColumns());
            
            for (int row = 0; row < sheet1.getRows(); row++) {
                for (int column = 0; column < sheet1.getColumns(); column++) {
                    String content = sheet1.getCell(column, row).getContents();
                    content = content.replaceAll(",",".");
                    dimensi_mesin[row][column]=Float.parseFloat(content);
                    model1.setValueAt(content, row, column);
                    }
                itungrow++;
                System.out.println(itungrow);
            }
            tabel_mesin.setModel(model1);
            
            jarak_mesin= new float[sheet2.getColumns()][sheet2.getColumns()];
            TableModel model2 = new DefaultTableModel(sheet2.getRows(), sheet2.getColumns());
            for (int row = 0; row < sheet2.getRows(); row++) {
                for (int column = 0; column < sheet2.getColumns(); column++) {
                    String content = sheet2.getCell(column, row).getContents();
                    jarak_mesin[row][column]=Float.parseFloat(content);
                    model2.setValueAt(content, row, column);
                }
            }
            tabel_jarak.setModel(model2);
            
            matrix_frek= new float[sheet3.getColumns()][sheet3.getColumns()];
            TableModel model3 = new DefaultTableModel(sheet3.getRows(), sheet3.getColumns());
            for (int row = 0; row < sheet3.getRows(); row++) {
              for (int column = 0; column < sheet3.getColumns(); column++) {
                    String content = sheet3.getCell(column, row).getContents();
                    matrix_frek[row][column]=Float.parseFloat(content);
                    model3.setValueAt(content, row, column);
                }
            }
            tabel_frek.setModel(model3);
            
            matrix_biaya= new float[sheet4.getColumns()][sheet4.getColumns()];
            TableModel model4 = new DefaultTableModel(sheet4.getRows(), sheet4.getColumns());
            for (int row = 0; row < sheet4.getRows(); row++) {
              for (int column = 0; column < sheet4.getColumns(); column++) {
                    String content = sheet4.getCell(column, row).getContents();
                    matrix_biaya[row][column]=Float.parseFloat(content);
                    model4.setValueAt(content, row, column);
              }
            }
            tabel_biaya.setModel(model4);
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        } 
    }
    else {
       TableModel model1 = new DefaultTableModel(4,4);
        tabel_mesin.setModel(model1);
        TableModel model2 = new DefaultTableModel(4,4);
        tabel_jarak.setModel(model2);
        TableModel model3 = new DefaultTableModel(4,4);
        tabel_frek.setModel(model3);
        TableModel model4 = new DefaultTableModel(4,4);
        tabel_biaya.setModel(model4);
}
    System.out.println(itungrow);
    nmesin.setText(String.valueOf(itungrow));
    float jpm = 0;
    int q = 0;
    while(q < itungrow){
        jpm += dimensi_mesin[q][0];
        q++;
    }
    System.out.println("hasil akhir " + String.valueOf(jpm));
    
    float sigmaj = 0;
    int qq = 0;
    float dd = (2*jarak_mesin[0][0]);
    
    while(qq<itungrow){
        sigmaj += jarak_mesin[1+qq][1+qq];
        qq++;
    }
         System.out.println("hasil sigmaj "+String.valueOf(sigmaj+dd));
         
         rdk = sigmaj + dd + jpm;
         System.out.println(laksyen);
    //Random rxkromosom = new Random();
    //int nkrom = rxkromosom.nextInt(itungrow - 1) + 1;
    //System.out.println("angka keberuntungan:" + String.valueOf(nkrom));
    for (int ng = 0; ng < 5; ng++) {
        Random xx = new Random();
        int separator = xx.nextInt(itungrow - 1) + 1;
        System.out.print(": " + String.valueOf(separator) + " : ");
        int[] testarray = new int[itungrow];
        
        for(int pa = 0; pa < testarray.length;pa++){
            testarray[pa] = pa + 1;
            //System.out.print(testarray[pa]+" | ");
        }
        
        shuffleArray(testarray);
        double popo = (double) Math.round(testarray.length);
        double pepe = (double) Math.round(separator);
        double t = (double) Math.ceil((popo / pepe) );
        System.out.println("hasil round " + String.valueOf(t));
        int m = (int) Math.round(t);
        System.out.println("TEST " + String.valueOf(m));
        int[][] krom = new int[separator][m];
        int b = 0;
        for(int x = 0; x < m;x++){
            for(int y = 0; y < separator; y++){
                if(b < testarray.length){
                    krom[y][x] = testarray[b];
                    //System.out.print(testarray[b] + "|");
                    System.out.print(krom[y][x]+"|");
                    b++;
                } else {
                    break;
                }
             }
             System.out.println("");
        }
        
        /*for(int ga = 0; ga < vv;ga++){
            System.out.print(testarray[ga] + " | ");
        }
        for(int ja = vv; ja < testarray.length;ja++){
            System.out.print(testarray[ja] + ":");
        }*/
        System.out.println("");
    }
    /*int[] testarray = new int[itungrow];
    for(int pa = 0; pa < testarray.length;pa++){
        testarray[pa] = pa + 1;
        System.out.print(testarray[pa]+" | ");
    }
    System.out.println("");
    shuffleArray(testarray);
    for(int ja = 0; ja < testarray.length;ja++){
        System.out.print(testarray[ja]+" | ");
    }*/
    
}
      
  void shuffleArray(int[] ar)
  {
    Random rnd = new Random();
    for (int i = ar.length - 1; i > 0; i--)
    {
      int index = rnd.nextInt(i + 1);
      // Simple swap
      int a = ar[index];
      ar[index] = ar[i];
      ar[i] = a;
    }
  }
}